I"±/<h2 id="fpga-development-with-wujian100-soc">FPGA Development with wujian100 SoC</h2>

<h3 id="part-two-cdk-develop">Part Two: CDK Develop</h3>

<p>Author: åŠ ä¸€(Jiayi)</p>

<h2 id="something-to-say">Something to say</h2>

<p>Recently I participate a contest named Integrate Circuit Innovation Contest which requires me to use WJ100 developed by Ali Inc. team t-head and a FPGA develop board with Xlinx XC7A200TR3B Core. Itâ€™s not my first time to cope with FPGA but still, I find it difficult to interpret Verilog Code and make the FPGA works. Luckily, with the help of WJ100 Sdk and CDK(C-sky Develop Kit) which developed by Ali Inc. we could jump the Verilog and long waiting synthesizing part directly to use the pre-setted circuit and easy writing C to develop.</p>

<hr />

<h2 id="about-wj100">About WJ100</h2>

<blockquote>
  <p>T-Headâ€™s Wujian SoC Platform utilizes the cloud-terminal-integration design philosophy that fuses software and hardware. Full stack integration of chips, operating systems and algorithms enables customers to develop chip products that can be mass-production.</p>

  <p>Low power consumption: User-defined power consumption scenarios, with standby power consumption of less than 1uA, and operating power consumption of less than 100uA/MHz</p>
</blockquote>

<p>According to the official sites of t-head Inc., WJ100 is a low cost and high power efficiency SoC, which barely means that it could be easily deployed on any chips and consumes lower power.</p>

<p>However, as I talked before, it is a open source project and as I believed, the real function of this SoC is to simplify the use of FPGA and to offer the developer a brand new way to develop: integrate Soc and FPGA to deal with some projects which require both power efficiency and fast steady frequency.</p>

<ul>
  <li>related websites
<a href="https://www.t-head.cn/">t-head</a></li>
</ul>

<h3 id="how-to-use-wj100-soc">How to use WJ100 SoC</h3>

<p>This tutorial is for those who utilize vivado to generate bitstream file and CDK to develop your own projects with <em>Windows</em>.</p>

<ul>
  <li>For Part 1 please refer to <a href="https://shieldjy.github.io/2020/03/25/FPGA-Development-with-WJ100-SoC/">Part_1_Bitstream_Generation</a>.</li>
</ul>

<h3 id="part-2-cdk-develop-on-windows">Part 2 CDK Develop on Windows</h3>

<h4 id="1-software-and-environment-installation">1. Software and Environment Installation</h4>

<ol>
  <li>
    <p>Prep your CDK desktop which is offered on <a href="https://occ.t-head.cn/community/download_detail?spm=a2oza.cdk.0.0.413b180fZDUK32&amp;id=575997419775328256">occ-thead</a> and you could download it directly by click <a href="https://cop-image-prod.oss-cn-hangzhou.aliyuncs.com/resource/420262990181302272/1578468253961/cdk-windows-V2.0.4-20200106-2123.zip">CDK_V2.0.4</a>. Its related toolchain which is offered on <a href="https://www.t-head.cn/product/mcu-platform?spm=a2ouz.12987056.0.0.237b6245GFiJjF&amp;lang=zh">t-head</a>  could be download directly by click <a href="https://www.t-head.cn/file/download?spm=a2ouz.12987056.0.0.237b48abyyRABY&amp;file=1571624106073/T-Head%20Tools%20package.zip">CDK_related_Software</a>.</p>
  </li>
  <li>
    <p>Install CDK V2.0.4 which is in <code class="highlighter-rouge">cdk-windows-V2.0.4-20200106-2123.zip</code> on your desktop.</p>
  </li>
  <li>
    <p>Install T-Head DebugServer-V5.8.6 which is offered in <code class="highlighter-rouge">T-head Tools package.zip</code>.</p>
  </li>
</ol>

<h4 id="2-about-wujian100-sdk">2. About wujian100 sdk</h4>

<ul>
  <li>THIS PART IS INDIRECTLY TRANSLATED FROM <em>wujian100 sdk è§£è¯»</em></li>
</ul>

<ol>
  <li>
    <p>So far we have successfully install all the software we need to program on your wujian100 SoC. Next let us see what we have got in repo <code class="highlighter-rouge">wujian100_open</code>.</p>
  </li>
  <li>
    <p>Open repo directory on your local computer and go into <code class="highlighter-rouge">sdk</code> folder. As we could see in the following structure</p>

    <div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sdk
â”œâ”€â”€ board
â”œâ”€â”€ csi_core
â”œâ”€â”€ csi_driver
â”œâ”€â”€ csi_kernel
â”œâ”€â”€ libs
â”œâ”€â”€ projects
â”œâ”€â”€ utilities
â””â”€â”€ VERSION
</code></pre></div>    </div>
  </li>
  <li>
    <p><code class="highlighter-rouge">board</code></p>

    <div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>board
 â””â”€wujian100_open_evb
     â”‚  board_init.c
     â”‚  gcc_csky.ld
     â”‚
     â””â”€include
             pin.h
             test_driver_config.h
             test_kernel_config.h
</code></pre></div>    </div>

    <p>board folder contains hardware initialize files.</p>
    <ul>
      <li><code class="highlighter-rouge">board_init.c</code> is called before main function. It configures clock timer used as record and delay and usart used as output.</li>
      <li><code class="highlighter-rouge">gcc_csky.ld</code> is the compilation link configuration, which configures the storage location of each field of the firmware generated by compilation, including i-sram, sram and heap size.</li>
      <li><code class="highlighter-rouge">pin.h</code> defines pin names used in examples and test projects.</li>
      <li><code class="highlighter-rouge">test_driver_config.h</code> defines enabilty for test projects.</li>
      <li><code class="highlighter-rouge">test_kernel_config.h</code> defines names for rtos used in test projects.</li>
    </ul>
  </li>
  <li>
    <p><code class="highlighter-rouge">csi_core</code></p>

    <div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>csi_core
 â””â”€include
         core_rv32.h
         csi_core.h
         csi_rv32_gcc.h
</code></pre></div>    </div>
  </li>
  <li>
    <p><code class="highlighter-rouge">csi_driver</code></p>

    <pre><code class="language-tree">csi_driver
 â”œâ”€include
 â”‚      drv_aes.h
 â”‚      drv_common.h
 â”‚      drv_crc.h
 â”‚      drv_dmac.h
 â”‚      drv_eflash.h
 â”‚      drv_errno.h
 â”‚      drv_gpio.h
 â”‚      drv_i2s.h
 â”‚      drv_iic.h
 â”‚      drv_intc.h
 â”‚      drv_irq.h
 â”‚      drv_pmu.h
 â”‚      drv_pwm.h
 â”‚      drv_rsa.h
 â”‚      drv_rtc.h
 â”‚      drv_sha.h
 â”‚      drv_spi.h
 â”‚      drv_spiflash.h
 â”‚      drv_timer.h
 â”‚      drv_trng.h
 â”‚      drv_usart.h
 â”‚      drv_wdt.h
 â”‚
 â””â”€wujian100_open
     â”‚  devices.c
     â”‚  isr.c
     â”‚  lib.c
     â”‚  novic_irq_tbl.c
     â”‚  pinmux.c
     â”‚  startup.S
     â”‚  system.c
     â”‚  sys_freq.c
     â”‚  trap_c.c
     â”‚  vectors.S
     â”‚  wj_dmac_v2.c
     â”‚  wj_irq.c
     â”‚  wj_oip_gpio.c
     â”‚  wj_oip_timer.c
     â”‚  wj_oip_wdt.c
     â”‚  wj_pwm.c
     â”‚  wj_rtc.c
     â”‚  wj_usi.c
     â”‚  wj_usi_iic.c
     â”‚  wj_usi_spi.c
     â”‚  wj_usi_usart.c
     â”‚  wj_usi_wrap.c
     â”‚
     â””â”€include
             drv_usi_iic.h
             drv_usi_spi.h
             drv_usi_usart.h
             io.h
             pinmux.h
             pin_name.h
             soc.h
             sys_freq.h
             usi_pin_planning.h
             wj_dmac_v2.h
             wj_oip_gpio.h
             wj_oip_timer.h
             wj_oip_wdt.h
             wj_pwm.h
             wj_rtc.h
             wj_usi.h
             wj_usi_iic.h
             wj_usi_spi.h
             wj_usi_usart.h
</code></pre>
  </li>
  <li>
    <p><code class="highlighter-rouge">csi_kernel</code></p>

    <pre><code class="language-tree">csi_kernel
 â”œâ”€include
 â”‚      csi_kernel.h
 â”‚
 â””â”€rhino
     â”œâ”€adapter
     â”‚      csi_rhino.c
     â”‚
     â”œâ”€arch
     â”‚  â”œâ”€include
     â”‚  â”‚      k_config.h
     â”‚  â”‚      k_types.h
     â”‚  â”‚      port.h
     â”‚  â”‚
     â”‚  â””â”€riscv
     â”‚          cpu_impl.c
     â”‚          csky_sched.c
     â”‚          port_c.c
     â”‚          port_s.S
     â”‚
     â”œâ”€board
     â”‚      board_cpu_pwr.c
     â”‚      board_cpu_pwr_rtc.c
     â”‚      board_cpu_pwr_systick.c
     â”‚      board_cpu_pwr_timer.c
     â”‚
     â”œâ”€common
     â”‚      k_atomic.c
     â”‚      k_atomic.h
     â”‚      k_cpuset.h
     â”‚      k_ffs.c
     â”‚      k_ffs.h
     â”‚      k_fifo.c
     â”‚      k_trace.c
     â”‚
     â”œâ”€core
     â”‚  â”‚  k_buf_queue.c
     â”‚  â”‚  k_dyn_mem_proc.c
     â”‚  â”‚  k_err.c
     â”‚  â”‚  k_event.c
     â”‚  â”‚  k_idle.c
     â”‚  â”‚  k_mm.c
     â”‚  â”‚  k_mm_blk.c
     â”‚  â”‚  k_mm_debug.c
     â”‚  â”‚  k_mutex.c
     â”‚  â”‚  k_obj.c
     â”‚  â”‚  k_pend.c
     â”‚  â”‚  k_queue.c
     â”‚  â”‚  k_ringbuf.c
     â”‚  â”‚  k_sched.c
     â”‚  â”‚  k_sem.c
     â”‚  â”‚  k_stats.c
     â”‚  â”‚  k_sys.c
     â”‚  â”‚  k_task.c
     â”‚  â”‚  k_task_sem.c
     â”‚  â”‚  k_tick.c
     â”‚  â”‚  k_time.c
     â”‚  â”‚  k_timer.c
     â”‚  â”‚  k_workqueue.c
     â”‚  â”‚
     â”‚  â””â”€include
     â”‚          k_api.h
     â”‚          k_bitmap.h
     â”‚          k_buf_queue.h
     â”‚          k_critical.h
     â”‚          k_default_config.h
     â”‚          k_endian.h
     â”‚          k_err.h
     â”‚          k_event.h
     â”‚          k_fifo.h
     â”‚          k_hook.h
     â”‚          k_internal.h
     â”‚          k_list.h
     â”‚          k_mm.h
     â”‚          k_mm_blk.h
     â”‚          k_mm_debug.h
     â”‚          k_mm_region.h
     â”‚          k_mutex.h
     â”‚          k_obj.h
     â”‚          k_queue.h
     â”‚          k_ringbuf.h
     â”‚          k_sched.h
     â”‚          k_sem.h
     â”‚          k_soc.h
     â”‚          k_stats.h
     â”‚          k_sys.h
     â”‚          k_task.h
     â”‚          k_task_sem.h
     â”‚          k_time.h
     â”‚          k_timer.h
     â”‚          k_trace.h
     â”‚          k_workqueue.h
     â”‚
     â”œâ”€driver
     â”‚      coretim.h
     â”‚      hook_impl.c
     â”‚      hook_weak.c
     â”‚      systick.c
     â”‚      yoc_impl.c
     â”‚
     â””â”€pwrmgmt
             cpu_pwr_api.h
             cpu_pwr_config.h
             cpu_pwr_hal_lib.h
             cpu_pwr_lib.h
             cpu_tickless.h
             dl_list.h
             pwr_debug.h
             pwr_state.h
</code></pre>
  </li>
  <li>
    <p><code class="highlighter-rouge">libs</code></p>

    <pre><code class="language-tree">libs
 â”‚  libnewlib_wrap.a
 â”‚
 â”œâ”€include
 â”‚  â”‚  errno.h
 â”‚  â”‚  mm.h
 â”‚  â”‚  mm_queue.h
 â”‚  â”‚  syslog.h
 â”‚  â”‚  time.h
 â”‚  â”‚  umm_heap.h
 â”‚  â”‚
 â”‚  â”œâ”€ringbuffer
 â”‚  â”‚      ringbuffer.h
 â”‚  â”‚
 â”‚  â””â”€sys
 â”‚          _stdint.h
 â”‚
 â”œâ”€libc
 â”‚      clock_gettime.c
 â”‚      malloc.c
 â”‚      minilibc_port.c
 â”‚      _init.c
 â”‚
 â”œâ”€mm
 â”‚      dq_addlast.c
 â”‚      dq_rem.c
 â”‚      lib_mallinfo.c
 â”‚      mm_addfreechunk.c
 â”‚      mm_free.c
 â”‚      mm_initialize.c
 â”‚      mm_leak.c
 â”‚      mm_mallinfo.c
 â”‚      mm_malloc.c
 â”‚      mm_size2ndx.c
 â”‚
 â”œâ”€ringbuffer
 â”‚      ringbuffer.c
 â”‚
 â””â”€syslog
         syslog.c
</code></pre>
  </li>
  <li>
    <p><code class="highlighter-rouge">projects</code></p>

    <pre><code class="language-tree">projects
 â”œâ”€benchmark
 â”‚  â”œâ”€coremark
 â”‚  â”‚
 â”‚  â””â”€dhrystone
 â”‚
 â”œâ”€examples
 â”‚  â”œâ”€core
 â”‚  â”‚  â””â”€vic
 â”‚  â”‚
 â”‚  â”œâ”€driver
 â”‚  â”‚  â”œâ”€dmac
 â”‚  â”‚  â”‚
 â”‚  â”‚  â”œâ”€gpio
 â”‚  â”‚  â”‚
 â”‚  â”‚  â”œâ”€timer
 â”‚  â”‚  â”‚
 â”‚  â”‚  â”œâ”€usart
 â”‚  â”‚  â”‚
 â”‚  â”‚  â””â”€wdt
 â”‚  â”‚
 â”‚  â”œâ”€hello_world
 â”‚  â”‚
 â”‚  â””â”€kernel
 â”‚      â”œâ”€event
 â”‚      â”‚
 â”‚      â”œâ”€mem_pool
 â”‚      â”‚
 â”‚      â”œâ”€message_q
 â”‚      â”‚
 â”‚      â”œâ”€mutex
 â”‚      â”‚
 â”‚      â”œâ”€sem
 â”‚      â”‚
 â”‚      â”œâ”€task
 â”‚      â”‚
 â”‚      â”œâ”€time
 â”‚      â”‚
 â”‚      â””â”€timer
 â”‚
 â””â”€tests
     â””â”€driver
</code></pre>
  </li>
  <li>
    <p><code class="highlighter-rouge">utilities</code></p>

    <div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>utilities
    aft_build.sh
    flash.init
    gdb.init
</code></pre></div>    </div>
  </li>
</ol>
:ET